#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TP4_concept.base_donnee
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="bdConcept")]
	public partial class bdConceptDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Définitions de méthodes d'extensibilité
    partial void OnCreated();
    partial void Insertadresses(adresses instance);
    partial void Updateadresses(adresses instance);
    partial void Deleteadresses(adresses instance);
    partial void Insertcategories(categories instance);
    partial void Updatecategories(categories instance);
    partial void Deletecategories(categories instance);
    partial void Insertcommandes(commandes instance);
    partial void Updatecommandes(commandes instance);
    partial void Deletecommandes(commandes instance);
    partial void Insertcomptes(comptes instance);
    partial void Updatecomptes(comptes instance);
    partial void Deletecomptes(comptes instance);
    partial void Insertetatcommandes(etatcommandes instance);
    partial void Updateetatcommandes(etatcommandes instance);
    partial void Deleteetatcommandes(etatcommandes instance);
    partial void Insertmenu_produits(menu_produits instance);
    partial void Updatemenu_produits(menu_produits instance);
    partial void Deletemenu_produits(menu_produits instance);
    partial void Insertmenus(menus instance);
    partial void Updatemenus(menus instance);
    partial void Deletemenus(menus instance);
    partial void Insertmodespaiement(modespaiement instance);
    partial void Updatemodespaiement(modespaiement instance);
    partial void Deletemodespaiement(modespaiement instance);
    partial void Insertproduits(produits instance);
    partial void Updateproduits(produits instance);
    partial void Deleteproduits(produits instance);
    partial void Insertrestaurants(restaurants instance);
    partial void Updaterestaurants(restaurants instance);
    partial void Deleterestaurants(restaurants instance);
    partial void Inserttypecomptes(typecomptes instance);
    partial void Updatetypecomptes(typecomptes instance);
    partial void Deletetypecomptes(typecomptes instance);
    #endregion
		
		public bdConceptDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["bdConceptConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public bdConceptDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public bdConceptDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public bdConceptDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public bdConceptDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<adresses> adresses
		{
			get
			{
				return this.GetTable<adresses>();
			}
		}
		
		public System.Data.Linq.Table<categories> categories
		{
			get
			{
				return this.GetTable<categories>();
			}
		}
		
		public System.Data.Linq.Table<commandes> commandes
		{
			get
			{
				return this.GetTable<commandes>();
			}
		}
		
		public System.Data.Linq.Table<comptes> comptes
		{
			get
			{
				return this.GetTable<comptes>();
			}
		}
		
		public System.Data.Linq.Table<etatcommandes> etatcommandes
		{
			get
			{
				return this.GetTable<etatcommandes>();
			}
		}
		
		public System.Data.Linq.Table<items_commande> items_commande
		{
			get
			{
				return this.GetTable<items_commande>();
			}
		}
		
		public System.Data.Linq.Table<menu_produits> menu_produits
		{
			get
			{
				return this.GetTable<menu_produits>();
			}
		}
		
		public System.Data.Linq.Table<menus> menus
		{
			get
			{
				return this.GetTable<menus>();
			}
		}
		
		public System.Data.Linq.Table<modespaiement> modespaiement
		{
			get
			{
				return this.GetTable<modespaiement>();
			}
		}
		
		public System.Data.Linq.Table<produits> produits
		{
			get
			{
				return this.GetTable<produits>();
			}
		}
		
		public System.Data.Linq.Table<restaurants> restaurants
		{
			get
			{
				return this.GetTable<restaurants>();
			}
		}
		
		public System.Data.Linq.Table<typecomptes> typecomptes
		{
			get
			{
				return this.GetTable<typecomptes>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.adresses")]
	public partial class adresses : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idAdrs;
		
		private string _noCvq;
		
		private string _Rue;
		
		private string _ville;
		
		private string _province;
		
		private string _codePostal;
		
		private string _telephone;
		
		private EntitySet<commandes> _commandes;
		
		private EntitySet<comptes> _comptes;
		
		private EntitySet<restaurants> _restaurants;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidAdrsChanging(int value);
    partial void OnidAdrsChanged();
    partial void OnnoCvqChanging(string value);
    partial void OnnoCvqChanged();
    partial void OnRueChanging(string value);
    partial void OnRueChanged();
    partial void OnvilleChanging(string value);
    partial void OnvilleChanged();
    partial void OnprovinceChanging(string value);
    partial void OnprovinceChanged();
    partial void OncodePostalChanging(string value);
    partial void OncodePostalChanged();
    partial void OntelephoneChanging(string value);
    partial void OntelephoneChanged();
    #endregion
		
		public adresses()
		{
			this._commandes = new EntitySet<commandes>(new Action<commandes>(this.attach_commandes), new Action<commandes>(this.detach_commandes));
			this._comptes = new EntitySet<comptes>(new Action<comptes>(this.attach_comptes), new Action<comptes>(this.detach_comptes));
			this._restaurants = new EntitySet<restaurants>(new Action<restaurants>(this.attach_restaurants), new Action<restaurants>(this.detach_restaurants));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idAdrs", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idAdrs
		{
			get
			{
				return this._idAdrs;
			}
			set
			{
				if ((this._idAdrs != value))
				{
					this.OnidAdrsChanging(value);
					this.SendPropertyChanging();
					this._idAdrs = value;
					this.SendPropertyChanged("idAdrs");
					this.OnidAdrsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_noCvq", DbType="VarChar(10)")]
		public string noCvq
		{
			get
			{
				return this._noCvq;
			}
			set
			{
				if ((this._noCvq != value))
				{
					this.OnnoCvqChanging(value);
					this.SendPropertyChanging();
					this._noCvq = value;
					this.SendPropertyChanged("noCvq");
					this.OnnoCvqChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rue", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Rue
		{
			get
			{
				return this._Rue;
			}
			set
			{
				if ((this._Rue != value))
				{
					this.OnRueChanging(value);
					this.SendPropertyChanging();
					this._Rue = value;
					this.SendPropertyChanged("Rue");
					this.OnRueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ville", DbType="VarChar(50)")]
		public string ville
		{
			get
			{
				return this._ville;
			}
			set
			{
				if ((this._ville != value))
				{
					this.OnvilleChanging(value);
					this.SendPropertyChanging();
					this._ville = value;
					this.SendPropertyChanged("ville");
					this.OnvilleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_province", DbType="VarChar(2)")]
		public string province
		{
			get
			{
				return this._province;
			}
			set
			{
				if ((this._province != value))
				{
					this.OnprovinceChanging(value);
					this.SendPropertyChanging();
					this._province = value;
					this.SendPropertyChanged("province");
					this.OnprovinceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_codePostal", DbType="Char(7)")]
		public string codePostal
		{
			get
			{
				return this._codePostal;
			}
			set
			{
				if ((this._codePostal != value))
				{
					this.OncodePostalChanging(value);
					this.SendPropertyChanging();
					this._codePostal = value;
					this.SendPropertyChanged("codePostal");
					this.OncodePostalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_telephone", DbType="Char(15)")]
		public string telephone
		{
			get
			{
				return this._telephone;
			}
			set
			{
				if ((this._telephone != value))
				{
					this.OntelephoneChanging(value);
					this.SendPropertyChanging();
					this._telephone = value;
					this.SendPropertyChanged("telephone");
					this.OntelephoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="adresses_commandes", Storage="_commandes", ThisKey="idAdrs", OtherKey="noAdrs")]
		public EntitySet<commandes> commandes
		{
			get
			{
				return this._commandes;
			}
			set
			{
				this._commandes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="adresses_comptes", Storage="_comptes", ThisKey="idAdrs", OtherKey="noAdrs")]
		public EntitySet<comptes> comptes
		{
			get
			{
				return this._comptes;
			}
			set
			{
				this._comptes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="adresses_restaurants", Storage="_restaurants", ThisKey="idAdrs", OtherKey="idAdrs")]
		public EntitySet<restaurants> restaurants
		{
			get
			{
				return this._restaurants;
			}
			set
			{
				this._restaurants.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_commandes(commandes entity)
		{
			this.SendPropertyChanging();
			entity.adresses = this;
		}
		
		private void detach_commandes(commandes entity)
		{
			this.SendPropertyChanging();
			entity.adresses = null;
		}
		
		private void attach_comptes(comptes entity)
		{
			this.SendPropertyChanging();
			entity.adresses = this;
		}
		
		private void detach_comptes(comptes entity)
		{
			this.SendPropertyChanging();
			entity.adresses = null;
		}
		
		private void attach_restaurants(restaurants entity)
		{
			this.SendPropertyChanging();
			entity.adresses = this;
		}
		
		private void detach_restaurants(restaurants entity)
		{
			this.SendPropertyChanging();
			entity.adresses = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.categories")]
	public partial class categories : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idCategorie;
		
		private string _nomCategorie;
		
		private EntitySet<produits> _produits;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidCategorieChanging(int value);
    partial void OnidCategorieChanged();
    partial void OnnomCategorieChanging(string value);
    partial void OnnomCategorieChanged();
    #endregion
		
		public categories()
		{
			this._produits = new EntitySet<produits>(new Action<produits>(this.attach_produits), new Action<produits>(this.detach_produits));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idCategorie", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idCategorie
		{
			get
			{
				return this._idCategorie;
			}
			set
			{
				if ((this._idCategorie != value))
				{
					this.OnidCategorieChanging(value);
					this.SendPropertyChanging();
					this._idCategorie = value;
					this.SendPropertyChanged("idCategorie");
					this.OnidCategorieChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nomCategorie", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string nomCategorie
		{
			get
			{
				return this._nomCategorie;
			}
			set
			{
				if ((this._nomCategorie != value))
				{
					this.OnnomCategorieChanging(value);
					this.SendPropertyChanging();
					this._nomCategorie = value;
					this.SendPropertyChanged("nomCategorie");
					this.OnnomCategorieChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="categories_produits", Storage="_produits", ThisKey="idCategorie", OtherKey="idCategorie")]
		public EntitySet<produits> produits
		{
			get
			{
				return this._produits;
			}
			set
			{
				this._produits.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_produits(produits entity)
		{
			this.SendPropertyChanging();
			entity.categories = this;
		}
		
		private void detach_produits(produits entity)
		{
			this.SendPropertyChanging();
			entity.categories = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.commandes")]
	public partial class commandes : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idCommande;
		
		private System.DateTime _datecommande;
		
		private int _idetat;
		
		private int _idModePaiement;
		
		private int _noClient;
		
		private int _noAdrs;
		
		private int _idMenu;
		
		private string _commentaires;
		
		private EntityRef<adresses> _adresses;
		
		private EntityRef<comptes> _comptes;
		
		private EntityRef<etatcommandes> _etatcommandes;
		
		private EntityRef<menus> _menus;
		
		private EntityRef<modespaiement> _modespaiement;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidCommandeChanging(int value);
    partial void OnidCommandeChanged();
    partial void OndatecommandeChanging(System.DateTime value);
    partial void OndatecommandeChanged();
    partial void OnidetatChanging(int value);
    partial void OnidetatChanged();
    partial void OnidModePaiementChanging(int value);
    partial void OnidModePaiementChanged();
    partial void OnnoClientChanging(int value);
    partial void OnnoClientChanged();
    partial void OnnoAdrsChanging(int value);
    partial void OnnoAdrsChanged();
    partial void OnidMenuChanging(int value);
    partial void OnidMenuChanged();
    partial void OncommentairesChanging(string value);
    partial void OncommentairesChanged();
    #endregion
		
		public commandes()
		{
			this._adresses = default(EntityRef<adresses>);
			this._comptes = default(EntityRef<comptes>);
			this._etatcommandes = default(EntityRef<etatcommandes>);
			this._menus = default(EntityRef<menus>);
			this._modespaiement = default(EntityRef<modespaiement>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idCommande", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idCommande
		{
			get
			{
				return this._idCommande;
			}
			set
			{
				if ((this._idCommande != value))
				{
					this.OnidCommandeChanging(value);
					this.SendPropertyChanging();
					this._idCommande = value;
					this.SendPropertyChanged("idCommande");
					this.OnidCommandeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_datecommande", DbType="DateTime2 NOT NULL")]
		public System.DateTime datecommande
		{
			get
			{
				return this._datecommande;
			}
			set
			{
				if ((this._datecommande != value))
				{
					this.OndatecommandeChanging(value);
					this.SendPropertyChanging();
					this._datecommande = value;
					this.SendPropertyChanged("datecommande");
					this.OndatecommandeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idetat", DbType="Int NOT NULL")]
		public int idetat
		{
			get
			{
				return this._idetat;
			}
			set
			{
				if ((this._idetat != value))
				{
					if (this._etatcommandes.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidetatChanging(value);
					this.SendPropertyChanging();
					this._idetat = value;
					this.SendPropertyChanged("idetat");
					this.OnidetatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idModePaiement", DbType="Int NOT NULL")]
		public int idModePaiement
		{
			get
			{
				return this._idModePaiement;
			}
			set
			{
				if ((this._idModePaiement != value))
				{
					if (this._modespaiement.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidModePaiementChanging(value);
					this.SendPropertyChanging();
					this._idModePaiement = value;
					this.SendPropertyChanged("idModePaiement");
					this.OnidModePaiementChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_noClient", DbType="Int NOT NULL")]
		public int noClient
		{
			get
			{
				return this._noClient;
			}
			set
			{
				if ((this._noClient != value))
				{
					if (this._comptes.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnnoClientChanging(value);
					this.SendPropertyChanging();
					this._noClient = value;
					this.SendPropertyChanged("noClient");
					this.OnnoClientChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_noAdrs", DbType="Int NOT NULL")]
		public int noAdrs
		{
			get
			{
				return this._noAdrs;
			}
			set
			{
				if ((this._noAdrs != value))
				{
					if (this._adresses.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnnoAdrsChanging(value);
					this.SendPropertyChanging();
					this._noAdrs = value;
					this.SendPropertyChanged("noAdrs");
					this.OnnoAdrsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idMenu", DbType="Int NOT NULL")]
		public int idMenu
		{
			get
			{
				return this._idMenu;
			}
			set
			{
				if ((this._idMenu != value))
				{
					if (this._menus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidMenuChanging(value);
					this.SendPropertyChanging();
					this._idMenu = value;
					this.SendPropertyChanged("idMenu");
					this.OnidMenuChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_commentaires", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string commentaires
		{
			get
			{
				return this._commentaires;
			}
			set
			{
				if ((this._commentaires != value))
				{
					this.OncommentairesChanging(value);
					this.SendPropertyChanging();
					this._commentaires = value;
					this.SendPropertyChanged("commentaires");
					this.OncommentairesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="adresses_commandes", Storage="_adresses", ThisKey="noAdrs", OtherKey="idAdrs", IsForeignKey=true)]
		public adresses adresses
		{
			get
			{
				return this._adresses.Entity;
			}
			set
			{
				adresses previousValue = this._adresses.Entity;
				if (((previousValue != value) 
							|| (this._adresses.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._adresses.Entity = null;
						previousValue.commandes.Remove(this);
					}
					this._adresses.Entity = value;
					if ((value != null))
					{
						value.commandes.Add(this);
						this._noAdrs = value.idAdrs;
					}
					else
					{
						this._noAdrs = default(int);
					}
					this.SendPropertyChanged("adresses");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="comptes_commandes", Storage="_comptes", ThisKey="noClient", OtherKey="noCompte", IsForeignKey=true)]
		public comptes comptes
		{
			get
			{
				return this._comptes.Entity;
			}
			set
			{
				comptes previousValue = this._comptes.Entity;
				if (((previousValue != value) 
							|| (this._comptes.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._comptes.Entity = null;
						previousValue.commandes.Remove(this);
					}
					this._comptes.Entity = value;
					if ((value != null))
					{
						value.commandes.Add(this);
						this._noClient = value.noCompte;
					}
					else
					{
						this._noClient = default(int);
					}
					this.SendPropertyChanged("comptes");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="etatcommandes_commandes", Storage="_etatcommandes", ThisKey="idetat", OtherKey="idEtat", IsForeignKey=true)]
		public etatcommandes etatcommandes
		{
			get
			{
				return this._etatcommandes.Entity;
			}
			set
			{
				etatcommandes previousValue = this._etatcommandes.Entity;
				if (((previousValue != value) 
							|| (this._etatcommandes.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._etatcommandes.Entity = null;
						previousValue.commandes.Remove(this);
					}
					this._etatcommandes.Entity = value;
					if ((value != null))
					{
						value.commandes.Add(this);
						this._idetat = value.idEtat;
					}
					else
					{
						this._idetat = default(int);
					}
					this.SendPropertyChanged("etatcommandes");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="menus_commandes", Storage="_menus", ThisKey="idMenu", OtherKey="idMenu", IsForeignKey=true)]
		public menus menus
		{
			get
			{
				return this._menus.Entity;
			}
			set
			{
				menus previousValue = this._menus.Entity;
				if (((previousValue != value) 
							|| (this._menus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._menus.Entity = null;
						previousValue.commandes.Remove(this);
					}
					this._menus.Entity = value;
					if ((value != null))
					{
						value.commandes.Add(this);
						this._idMenu = value.idMenu;
					}
					else
					{
						this._idMenu = default(int);
					}
					this.SendPropertyChanged("menus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="modespaiement_commandes", Storage="_modespaiement", ThisKey="idModePaiement", OtherKey="idMode", IsForeignKey=true)]
		public modespaiement modespaiement
		{
			get
			{
				return this._modespaiement.Entity;
			}
			set
			{
				modespaiement previousValue = this._modespaiement.Entity;
				if (((previousValue != value) 
							|| (this._modespaiement.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._modespaiement.Entity = null;
						previousValue.commandes.Remove(this);
					}
					this._modespaiement.Entity = value;
					if ((value != null))
					{
						value.commandes.Add(this);
						this._idModePaiement = value.idMode;
					}
					else
					{
						this._idModePaiement = default(int);
					}
					this.SendPropertyChanged("modespaiement");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.comptes")]
	public partial class comptes : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _noCompte;
		
		private int _notpCmpt;
		
		private string _prenom;
		
		private string _nom;
		
		private int _noAdrs;
		
		private string _telephone;
		
		private string _Courriel;
		
		private string _nomUtilisateur;
		
		private string _motPasse;
		
		private short _Actif;
		
		private string _commentaires;
		
		private EntitySet<commandes> _commandes;
		
		private EntityRef<adresses> _adresses;
		
		private EntityRef<typecomptes> _typecomptes;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnnoCompteChanging(int value);
    partial void OnnoCompteChanged();
    partial void OnnotpCmptChanging(int value);
    partial void OnnotpCmptChanged();
    partial void OnprenomChanging(string value);
    partial void OnprenomChanged();
    partial void OnnomChanging(string value);
    partial void OnnomChanged();
    partial void OnnoAdrsChanging(int value);
    partial void OnnoAdrsChanged();
    partial void OntelephoneChanging(string value);
    partial void OntelephoneChanged();
    partial void OnCourrielChanging(string value);
    partial void OnCourrielChanged();
    partial void OnnomUtilisateurChanging(string value);
    partial void OnnomUtilisateurChanged();
    partial void OnmotPasseChanging(string value);
    partial void OnmotPasseChanged();
    partial void OnActifChanging(short value);
    partial void OnActifChanged();
    partial void OncommentairesChanging(string value);
    partial void OncommentairesChanged();
    #endregion
		
		public comptes()
		{
			this._commandes = new EntitySet<commandes>(new Action<commandes>(this.attach_commandes), new Action<commandes>(this.detach_commandes));
			this._adresses = default(EntityRef<adresses>);
			this._typecomptes = default(EntityRef<typecomptes>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_noCompte", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int noCompte
		{
			get
			{
				return this._noCompte;
			}
			set
			{
				if ((this._noCompte != value))
				{
					this.OnnoCompteChanging(value);
					this.SendPropertyChanging();
					this._noCompte = value;
					this.SendPropertyChanged("noCompte");
					this.OnnoCompteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_notpCmpt", DbType="Int NOT NULL")]
		public int notpCmpt
		{
			get
			{
				return this._notpCmpt;
			}
			set
			{
				if ((this._notpCmpt != value))
				{
					if (this._typecomptes.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnnotpCmptChanging(value);
					this.SendPropertyChanging();
					this._notpCmpt = value;
					this.SendPropertyChanged("notpCmpt");
					this.OnnotpCmptChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_prenom", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string prenom
		{
			get
			{
				return this._prenom;
			}
			set
			{
				if ((this._prenom != value))
				{
					this.OnprenomChanging(value);
					this.SendPropertyChanging();
					this._prenom = value;
					this.SendPropertyChanged("prenom");
					this.OnprenomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nom", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string nom
		{
			get
			{
				return this._nom;
			}
			set
			{
				if ((this._nom != value))
				{
					this.OnnomChanging(value);
					this.SendPropertyChanging();
					this._nom = value;
					this.SendPropertyChanged("nom");
					this.OnnomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_noAdrs", DbType="Int NOT NULL")]
		public int noAdrs
		{
			get
			{
				return this._noAdrs;
			}
			set
			{
				if ((this._noAdrs != value))
				{
					if (this._adresses.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnnoAdrsChanging(value);
					this.SendPropertyChanging();
					this._noAdrs = value;
					this.SendPropertyChanged("noAdrs");
					this.OnnoAdrsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_telephone", DbType="VarChar(25)")]
		public string telephone
		{
			get
			{
				return this._telephone;
			}
			set
			{
				if ((this._telephone != value))
				{
					this.OntelephoneChanging(value);
					this.SendPropertyChanging();
					this._telephone = value;
					this.SendPropertyChanged("telephone");
					this.OntelephoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Courriel", DbType="VarChar(100)")]
		public string Courriel
		{
			get
			{
				return this._Courriel;
			}
			set
			{
				if ((this._Courriel != value))
				{
					this.OnCourrielChanging(value);
					this.SendPropertyChanging();
					this._Courriel = value;
					this.SendPropertyChanged("Courriel");
					this.OnCourrielChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nomUtilisateur", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string nomUtilisateur
		{
			get
			{
				return this._nomUtilisateur;
			}
			set
			{
				if ((this._nomUtilisateur != value))
				{
					this.OnnomUtilisateurChanging(value);
					this.SendPropertyChanging();
					this._nomUtilisateur = value;
					this.SendPropertyChanged("nomUtilisateur");
					this.OnnomUtilisateurChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_motPasse", DbType="VarChar(40) NOT NULL", CanBeNull=false)]
		public string motPasse
		{
			get
			{
				return this._motPasse;
			}
			set
			{
				if ((this._motPasse != value))
				{
					this.OnmotPasseChanging(value);
					this.SendPropertyChanging();
					this._motPasse = value;
					this.SendPropertyChanged("motPasse");
					this.OnmotPasseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Actif", DbType="SmallInt NOT NULL")]
		public short Actif
		{
			get
			{
				return this._Actif;
			}
			set
			{
				if ((this._Actif != value))
				{
					this.OnActifChanging(value);
					this.SendPropertyChanging();
					this._Actif = value;
					this.SendPropertyChanged("Actif");
					this.OnActifChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_commentaires", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string commentaires
		{
			get
			{
				return this._commentaires;
			}
			set
			{
				if ((this._commentaires != value))
				{
					this.OncommentairesChanging(value);
					this.SendPropertyChanging();
					this._commentaires = value;
					this.SendPropertyChanged("commentaires");
					this.OncommentairesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="comptes_commandes", Storage="_commandes", ThisKey="noCompte", OtherKey="noClient")]
		public EntitySet<commandes> commandes
		{
			get
			{
				return this._commandes;
			}
			set
			{
				this._commandes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="adresses_comptes", Storage="_adresses", ThisKey="noAdrs", OtherKey="idAdrs", IsForeignKey=true)]
		public adresses adresses
		{
			get
			{
				return this._adresses.Entity;
			}
			set
			{
				adresses previousValue = this._adresses.Entity;
				if (((previousValue != value) 
							|| (this._adresses.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._adresses.Entity = null;
						previousValue.comptes.Remove(this);
					}
					this._adresses.Entity = value;
					if ((value != null))
					{
						value.comptes.Add(this);
						this._noAdrs = value.idAdrs;
					}
					else
					{
						this._noAdrs = default(int);
					}
					this.SendPropertyChanged("adresses");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="typecomptes_comptes", Storage="_typecomptes", ThisKey="notpCmpt", OtherKey="idtype", IsForeignKey=true)]
		public typecomptes typecomptes
		{
			get
			{
				return this._typecomptes.Entity;
			}
			set
			{
				typecomptes previousValue = this._typecomptes.Entity;
				if (((previousValue != value) 
							|| (this._typecomptes.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._typecomptes.Entity = null;
						previousValue.comptes.Remove(this);
					}
					this._typecomptes.Entity = value;
					if ((value != null))
					{
						value.comptes.Add(this);
						this._notpCmpt = value.idtype;
					}
					else
					{
						this._notpCmpt = default(int);
					}
					this.SendPropertyChanged("typecomptes");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_commandes(commandes entity)
		{
			this.SendPropertyChanging();
			entity.comptes = this;
		}
		
		private void detach_commandes(commandes entity)
		{
			this.SendPropertyChanging();
			entity.comptes = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.etatcommandes")]
	public partial class etatcommandes : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idEtat;
		
		private string _Etat;
		
		private EntitySet<commandes> _commandes;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidEtatChanging(int value);
    partial void OnidEtatChanged();
    partial void OnEtatChanging(string value);
    partial void OnEtatChanged();
    #endregion
		
		public etatcommandes()
		{
			this._commandes = new EntitySet<commandes>(new Action<commandes>(this.attach_commandes), new Action<commandes>(this.detach_commandes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idEtat", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idEtat
		{
			get
			{
				return this._idEtat;
			}
			set
			{
				if ((this._idEtat != value))
				{
					this.OnidEtatChanging(value);
					this.SendPropertyChanging();
					this._idEtat = value;
					this.SendPropertyChanged("idEtat");
					this.OnidEtatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Etat", DbType="VarChar(35) NOT NULL", CanBeNull=false)]
		public string Etat
		{
			get
			{
				return this._Etat;
			}
			set
			{
				if ((this._Etat != value))
				{
					this.OnEtatChanging(value);
					this.SendPropertyChanging();
					this._Etat = value;
					this.SendPropertyChanged("Etat");
					this.OnEtatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="etatcommandes_commandes", Storage="_commandes", ThisKey="idEtat", OtherKey="idetat")]
		public EntitySet<commandes> commandes
		{
			get
			{
				return this._commandes;
			}
			set
			{
				this._commandes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_commandes(commandes entity)
		{
			this.SendPropertyChanging();
			entity.etatcommandes = this;
		}
		
		private void detach_commandes(commandes entity)
		{
			this.SendPropertyChanging();
			entity.etatcommandes = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.items_commande")]
	public partial class items_commande
	{
		
		private int _noCommande;
		
		private int _noProduit;
		
		private int _qte;
		
		public items_commande()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_noCommande", DbType="Int NOT NULL")]
		public int noCommande
		{
			get
			{
				return this._noCommande;
			}
			set
			{
				if ((this._noCommande != value))
				{
					this._noCommande = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_noProduit", DbType="Int NOT NULL")]
		public int noProduit
		{
			get
			{
				return this._noProduit;
			}
			set
			{
				if ((this._noProduit != value))
				{
					this._noProduit = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_qte", DbType="Int NOT NULL")]
		public int qte
		{
			get
			{
				return this._qte;
			}
			set
			{
				if ((this._qte != value))
				{
					this._qte = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.menu_produits")]
	public partial class menu_produits : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idItem;
		
		private int _idMenu;
		
		private int _idProduit;
		
		private EntityRef<menus> _menus;
		
		private EntityRef<produits> _produits;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidItemChanging(int value);
    partial void OnidItemChanged();
    partial void OnidMenuChanging(int value);
    partial void OnidMenuChanged();
    partial void OnidProduitChanging(int value);
    partial void OnidProduitChanged();
    #endregion
		
		public menu_produits()
		{
			this._menus = default(EntityRef<menus>);
			this._produits = default(EntityRef<produits>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idItem", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idItem
		{
			get
			{
				return this._idItem;
			}
			set
			{
				if ((this._idItem != value))
				{
					this.OnidItemChanging(value);
					this.SendPropertyChanging();
					this._idItem = value;
					this.SendPropertyChanged("idItem");
					this.OnidItemChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idMenu", DbType="Int NOT NULL")]
		public int idMenu
		{
			get
			{
				return this._idMenu;
			}
			set
			{
				if ((this._idMenu != value))
				{
					if (this._menus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidMenuChanging(value);
					this.SendPropertyChanging();
					this._idMenu = value;
					this.SendPropertyChanged("idMenu");
					this.OnidMenuChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idProduit", DbType="Int NOT NULL")]
		public int idProduit
		{
			get
			{
				return this._idProduit;
			}
			set
			{
				if ((this._idProduit != value))
				{
					if (this._produits.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidProduitChanging(value);
					this.SendPropertyChanging();
					this._idProduit = value;
					this.SendPropertyChanged("idProduit");
					this.OnidProduitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="menus_menu_produits", Storage="_menus", ThisKey="idMenu", OtherKey="idMenu", IsForeignKey=true)]
		public menus menus
		{
			get
			{
				return this._menus.Entity;
			}
			set
			{
				menus previousValue = this._menus.Entity;
				if (((previousValue != value) 
							|| (this._menus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._menus.Entity = null;
						previousValue.menu_produits.Remove(this);
					}
					this._menus.Entity = value;
					if ((value != null))
					{
						value.menu_produits.Add(this);
						this._idMenu = value.idMenu;
					}
					else
					{
						this._idMenu = default(int);
					}
					this.SendPropertyChanged("menus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="produits_menu_produits", Storage="_produits", ThisKey="idProduit", OtherKey="idProduit", IsForeignKey=true)]
		public produits produits
		{
			get
			{
				return this._produits.Entity;
			}
			set
			{
				produits previousValue = this._produits.Entity;
				if (((previousValue != value) 
							|| (this._produits.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._produits.Entity = null;
						previousValue.menu_produits.Remove(this);
					}
					this._produits.Entity = value;
					if ((value != null))
					{
						value.menu_produits.Add(this);
						this._idProduit = value.idProduit;
					}
					else
					{
						this._idProduit = default(int);
					}
					this.SendPropertyChanged("produits");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.menus")]
	public partial class menus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idMenu;
		
		private string _titreMenu;
		
		private short _actif;
		
		private string _commentaires;
		
		private int _idResto;
		
		private EntitySet<commandes> _commandes;
		
		private EntitySet<menu_produits> _menu_produits;
		
		private EntityRef<restaurants> _restaurants;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidMenuChanging(int value);
    partial void OnidMenuChanged();
    partial void OntitreMenuChanging(string value);
    partial void OntitreMenuChanged();
    partial void OnactifChanging(short value);
    partial void OnactifChanged();
    partial void OncommentairesChanging(string value);
    partial void OncommentairesChanged();
    partial void OnidRestoChanging(int value);
    partial void OnidRestoChanged();
    #endregion
		
		public menus()
		{
			this._commandes = new EntitySet<commandes>(new Action<commandes>(this.attach_commandes), new Action<commandes>(this.detach_commandes));
			this._menu_produits = new EntitySet<menu_produits>(new Action<menu_produits>(this.attach_menu_produits), new Action<menu_produits>(this.detach_menu_produits));
			this._restaurants = default(EntityRef<restaurants>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idMenu", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idMenu
		{
			get
			{
				return this._idMenu;
			}
			set
			{
				if ((this._idMenu != value))
				{
					this.OnidMenuChanging(value);
					this.SendPropertyChanging();
					this._idMenu = value;
					this.SendPropertyChanged("idMenu");
					this.OnidMenuChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_titreMenu", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string titreMenu
		{
			get
			{
				return this._titreMenu;
			}
			set
			{
				if ((this._titreMenu != value))
				{
					this.OntitreMenuChanging(value);
					this.SendPropertyChanging();
					this._titreMenu = value;
					this.SendPropertyChanged("titreMenu");
					this.OntitreMenuChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_actif", DbType="SmallInt NOT NULL")]
		public short actif
		{
			get
			{
				return this._actif;
			}
			set
			{
				if ((this._actif != value))
				{
					this.OnactifChanging(value);
					this.SendPropertyChanging();
					this._actif = value;
					this.SendPropertyChanged("actif");
					this.OnactifChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_commentaires", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string commentaires
		{
			get
			{
				return this._commentaires;
			}
			set
			{
				if ((this._commentaires != value))
				{
					this.OncommentairesChanging(value);
					this.SendPropertyChanging();
					this._commentaires = value;
					this.SendPropertyChanged("commentaires");
					this.OncommentairesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idResto", DbType="Int NOT NULL")]
		public int idResto
		{
			get
			{
				return this._idResto;
			}
			set
			{
				if ((this._idResto != value))
				{
					if (this._restaurants.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidRestoChanging(value);
					this.SendPropertyChanging();
					this._idResto = value;
					this.SendPropertyChanged("idResto");
					this.OnidRestoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="menus_commandes", Storage="_commandes", ThisKey="idMenu", OtherKey="idMenu")]
		public EntitySet<commandes> commandes
		{
			get
			{
				return this._commandes;
			}
			set
			{
				this._commandes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="menus_menu_produits", Storage="_menu_produits", ThisKey="idMenu", OtherKey="idMenu")]
		public EntitySet<menu_produits> menu_produits
		{
			get
			{
				return this._menu_produits;
			}
			set
			{
				this._menu_produits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="restaurants_menus", Storage="_restaurants", ThisKey="idResto", OtherKey="idResto", IsForeignKey=true)]
		public restaurants restaurants
		{
			get
			{
				return this._restaurants.Entity;
			}
			set
			{
				restaurants previousValue = this._restaurants.Entity;
				if (((previousValue != value) 
							|| (this._restaurants.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._restaurants.Entity = null;
						previousValue.menus.Remove(this);
					}
					this._restaurants.Entity = value;
					if ((value != null))
					{
						value.menus.Add(this);
						this._idResto = value.idResto;
					}
					else
					{
						this._idResto = default(int);
					}
					this.SendPropertyChanged("restaurants");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_commandes(commandes entity)
		{
			this.SendPropertyChanging();
			entity.menus = this;
		}
		
		private void detach_commandes(commandes entity)
		{
			this.SendPropertyChanging();
			entity.menus = null;
		}
		
		private void attach_menu_produits(menu_produits entity)
		{
			this.SendPropertyChanging();
			entity.menus = this;
		}
		
		private void detach_menu_produits(menu_produits entity)
		{
			this.SendPropertyChanging();
			entity.menus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.modespaiement")]
	public partial class modespaiement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idMode;
		
		private string _description;
		
		private EntitySet<commandes> _commandes;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidModeChanging(int value);
    partial void OnidModeChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    #endregion
		
		public modespaiement()
		{
			this._commandes = new EntitySet<commandes>(new Action<commandes>(this.attach_commandes), new Action<commandes>(this.detach_commandes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idMode", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idMode
		{
			get
			{
				return this._idMode;
			}
			set
			{
				if ((this._idMode != value))
				{
					this.OnidModeChanging(value);
					this.SendPropertyChanging();
					this._idMode = value;
					this.SendPropertyChanged("idMode");
					this.OnidModeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="modespaiement_commandes", Storage="_commandes", ThisKey="idMode", OtherKey="idModePaiement")]
		public EntitySet<commandes> commandes
		{
			get
			{
				return this._commandes;
			}
			set
			{
				this._commandes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_commandes(commandes entity)
		{
			this.SendPropertyChanging();
			entity.modespaiement = this;
		}
		
		private void detach_commandes(commandes entity)
		{
			this.SendPropertyChanging();
			entity.modespaiement = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.produits")]
	public partial class produits : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idProduit;
		
		private string _nomProd;
		
		private string _descProd;
		
		private decimal _prixProd;
		
		private string _imgProd;
		
		private int _idCategorie;
		
		private EntitySet<menu_produits> _menu_produits;
		
		private EntityRef<categories> _categories;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidProduitChanging(int value);
    partial void OnidProduitChanged();
    partial void OnnomProdChanging(string value);
    partial void OnnomProdChanged();
    partial void OndescProdChanging(string value);
    partial void OndescProdChanged();
    partial void OnprixProdChanging(decimal value);
    partial void OnprixProdChanged();
    partial void OnimgProdChanging(string value);
    partial void OnimgProdChanged();
    partial void OnidCategorieChanging(int value);
    partial void OnidCategorieChanged();
    #endregion
		
		public produits()
		{
			this._menu_produits = new EntitySet<menu_produits>(new Action<menu_produits>(this.attach_menu_produits), new Action<menu_produits>(this.detach_menu_produits));
			this._categories = default(EntityRef<categories>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idProduit", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idProduit
		{
			get
			{
				return this._idProduit;
			}
			set
			{
				if ((this._idProduit != value))
				{
					this.OnidProduitChanging(value);
					this.SendPropertyChanging();
					this._idProduit = value;
					this.SendPropertyChanged("idProduit");
					this.OnidProduitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nomProd", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string nomProd
		{
			get
			{
				return this._nomProd;
			}
			set
			{
				if ((this._nomProd != value))
				{
					this.OnnomProdChanging(value);
					this.SendPropertyChanging();
					this._nomProd = value;
					this.SendPropertyChanged("nomProd");
					this.OnnomProdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_descProd", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string descProd
		{
			get
			{
				return this._descProd;
			}
			set
			{
				if ((this._descProd != value))
				{
					this.OndescProdChanging(value);
					this.SendPropertyChanging();
					this._descProd = value;
					this.SendPropertyChanged("descProd");
					this.OndescProdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_prixProd", DbType="Decimal(10,0) NOT NULL")]
		public decimal prixProd
		{
			get
			{
				return this._prixProd;
			}
			set
			{
				if ((this._prixProd != value))
				{
					this.OnprixProdChanging(value);
					this.SendPropertyChanging();
					this._prixProd = value;
					this.SendPropertyChanged("prixProd");
					this.OnprixProdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_imgProd", DbType="VarChar(1000) NOT NULL", CanBeNull=false)]
		public string imgProd
		{
			get
			{
				return this._imgProd;
			}
			set
			{
				if ((this._imgProd != value))
				{
					this.OnimgProdChanging(value);
					this.SendPropertyChanging();
					this._imgProd = value;
					this.SendPropertyChanged("imgProd");
					this.OnimgProdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idCategorie", DbType="Int NOT NULL")]
		public int idCategorie
		{
			get
			{
				return this._idCategorie;
			}
			set
			{
				if ((this._idCategorie != value))
				{
					if (this._categories.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidCategorieChanging(value);
					this.SendPropertyChanging();
					this._idCategorie = value;
					this.SendPropertyChanged("idCategorie");
					this.OnidCategorieChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="produits_menu_produits", Storage="_menu_produits", ThisKey="idProduit", OtherKey="idProduit")]
		public EntitySet<menu_produits> menu_produits
		{
			get
			{
				return this._menu_produits;
			}
			set
			{
				this._menu_produits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="categories_produits", Storage="_categories", ThisKey="idCategorie", OtherKey="idCategorie", IsForeignKey=true)]
		public categories categories
		{
			get
			{
				return this._categories.Entity;
			}
			set
			{
				categories previousValue = this._categories.Entity;
				if (((previousValue != value) 
							|| (this._categories.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._categories.Entity = null;
						previousValue.produits.Remove(this);
					}
					this._categories.Entity = value;
					if ((value != null))
					{
						value.produits.Add(this);
						this._idCategorie = value.idCategorie;
					}
					else
					{
						this._idCategorie = default(int);
					}
					this.SendPropertyChanged("categories");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_menu_produits(menu_produits entity)
		{
			this.SendPropertyChanging();
			entity.produits = this;
		}
		
		private void detach_menu_produits(menu_produits entity)
		{
			this.SendPropertyChanging();
			entity.produits = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.restaurants")]
	public partial class restaurants : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idResto;
		
		private string _nomResto;
		
		private int _idAdrs;
		
		private short _Actif;
		
		private EntitySet<menus> _menus;
		
		private EntityRef<adresses> _adresses;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidRestoChanging(int value);
    partial void OnidRestoChanged();
    partial void OnnomRestoChanging(string value);
    partial void OnnomRestoChanged();
    partial void OnidAdrsChanging(int value);
    partial void OnidAdrsChanged();
    partial void OnActifChanging(short value);
    partial void OnActifChanged();
    #endregion
		
		public restaurants()
		{
			this._menus = new EntitySet<menus>(new Action<menus>(this.attach_menus), new Action<menus>(this.detach_menus));
			this._adresses = default(EntityRef<adresses>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idResto", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idResto
		{
			get
			{
				return this._idResto;
			}
			set
			{
				if ((this._idResto != value))
				{
					this.OnidRestoChanging(value);
					this.SendPropertyChanging();
					this._idResto = value;
					this.SendPropertyChanged("idResto");
					this.OnidRestoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nomResto", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string nomResto
		{
			get
			{
				return this._nomResto;
			}
			set
			{
				if ((this._nomResto != value))
				{
					this.OnnomRestoChanging(value);
					this.SendPropertyChanging();
					this._nomResto = value;
					this.SendPropertyChanged("nomResto");
					this.OnnomRestoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idAdrs", DbType="Int NOT NULL")]
		public int idAdrs
		{
			get
			{
				return this._idAdrs;
			}
			set
			{
				if ((this._idAdrs != value))
				{
					if (this._adresses.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidAdrsChanging(value);
					this.SendPropertyChanging();
					this._idAdrs = value;
					this.SendPropertyChanged("idAdrs");
					this.OnidAdrsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Actif", DbType="SmallInt NOT NULL")]
		public short Actif
		{
			get
			{
				return this._Actif;
			}
			set
			{
				if ((this._Actif != value))
				{
					this.OnActifChanging(value);
					this.SendPropertyChanging();
					this._Actif = value;
					this.SendPropertyChanged("Actif");
					this.OnActifChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="restaurants_menus", Storage="_menus", ThisKey="idResto", OtherKey="idResto")]
		public EntitySet<menus> menus
		{
			get
			{
				return this._menus;
			}
			set
			{
				this._menus.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="adresses_restaurants", Storage="_adresses", ThisKey="idAdrs", OtherKey="idAdrs", IsForeignKey=true)]
		public adresses adresses
		{
			get
			{
				return this._adresses.Entity;
			}
			set
			{
				adresses previousValue = this._adresses.Entity;
				if (((previousValue != value) 
							|| (this._adresses.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._adresses.Entity = null;
						previousValue.restaurants.Remove(this);
					}
					this._adresses.Entity = value;
					if ((value != null))
					{
						value.restaurants.Add(this);
						this._idAdrs = value.idAdrs;
					}
					else
					{
						this._idAdrs = default(int);
					}
					this.SendPropertyChanged("adresses");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_menus(menus entity)
		{
			this.SendPropertyChanging();
			entity.restaurants = this;
		}
		
		private void detach_menus(menus entity)
		{
			this.SendPropertyChanging();
			entity.restaurants = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.typecomptes")]
	public partial class typecomptes : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idtype;
		
		private string _nomType;
		
		private EntitySet<comptes> _comptes;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidtypeChanging(int value);
    partial void OnidtypeChanged();
    partial void OnnomTypeChanging(string value);
    partial void OnnomTypeChanged();
    #endregion
		
		public typecomptes()
		{
			this._comptes = new EntitySet<comptes>(new Action<comptes>(this.attach_comptes), new Action<comptes>(this.detach_comptes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idtype", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idtype
		{
			get
			{
				return this._idtype;
			}
			set
			{
				if ((this._idtype != value))
				{
					this.OnidtypeChanging(value);
					this.SendPropertyChanging();
					this._idtype = value;
					this.SendPropertyChanged("idtype");
					this.OnidtypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nomType", DbType="VarChar(35) NOT NULL", CanBeNull=false)]
		public string nomType
		{
			get
			{
				return this._nomType;
			}
			set
			{
				if ((this._nomType != value))
				{
					this.OnnomTypeChanging(value);
					this.SendPropertyChanging();
					this._nomType = value;
					this.SendPropertyChanged("nomType");
					this.OnnomTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="typecomptes_comptes", Storage="_comptes", ThisKey="idtype", OtherKey="notpCmpt")]
		public EntitySet<comptes> comptes
		{
			get
			{
				return this._comptes;
			}
			set
			{
				this._comptes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_comptes(comptes entity)
		{
			this.SendPropertyChanging();
			entity.typecomptes = this;
		}
		
		private void detach_comptes(comptes entity)
		{
			this.SendPropertyChanging();
			entity.typecomptes = null;
		}
	}
}
#pragma warning restore 1591
